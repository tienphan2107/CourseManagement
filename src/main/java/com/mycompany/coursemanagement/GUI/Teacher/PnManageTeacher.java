/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.coursemanament.GUI.Teacher;

import com.mycompany.coursemanagement.BUS.PersonBUS;
import com.mycompany.coursemanagement.Models.Person;
import java.sql.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL
 */
public class PnManageTeacher extends javax.swing.JPanel {

    private PersonBUS teacherBUS = new PersonBUS();
    private List<Person> list;
    private DefaultTableModel tableModel;

    EditManageTeacher EditFrame;
    DetailManangeTeacher DetailFrame;
    AddManageTeacher AddFrame;

    /**
     * Creates new form ManageStudentGrade
     */
    public PnManageTeacher() {
        initComponents();
        this.setSize(885, 515);
        SetUpTable();
        Reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbTeacher = new javax.swing.JTable();
        txtFindContent = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnReload = new javax.swing.JButton();

        tbTeacher.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "TeacherID", "LastName", "FirstName", "Hire Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbTeacher.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(tbTeacher);
        if (tbTeacher.getColumnModel().getColumnCount() > 0) {
            tbTeacher.getColumnModel().getColumn(0).setResizable(false);
        }

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnReload.setText("Reload");
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 880, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtFindContent, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSearch)
                            .addGap(160, 160, 160)
                            .addComponent(btnReload)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnView)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnAdd)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnEdit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnDelete)))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 510, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtFindContent)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnReload, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                    .addContainerGap()))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (txtFindContent.getText().isBlank()) {
            JOptionPane.showMessageDialog(this, "Please type FirstName Or LastName in the TextBox.", "Message", JOptionPane.ERROR_MESSAGE);
            txtFindContent.setText("");
            txtFindContent.requestFocus();
            return;
        }

        String FirstNameOrLastName;
        try {
            FirstNameOrLastName = String.valueOf(txtFindContent.getText().trim());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Please enter a valid FirstName Or LastName.", "Message", JOptionPane.ERROR_MESSAGE);
            txtFindContent.setText("");
            txtFindContent.requestFocus();
            return;
        }

        List<Person> resultList;
        try {
            resultList = teacherBUS.findTeacher(FirstNameOrLastName);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An error occurred when finding data, please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            return;
        }

        LoadTeacher(resultList);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void LoadTeacher(List<Person> listTeacher) {
        DefaultTableModel tableModel = (DefaultTableModel) tbTeacher.getModel();
        tableModel.setRowCount(0); // Clear the existing rows in the table
        for (Person teacher : listTeacher) {
            Object[] rowData = {teacher.getPersonID(), teacher.getLastName(), teacher.getFirstName(), teacher.getHireDate()};
            tableModel.addRow(rowData); // Add each student grade as a row in the table
        }
    }
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (tbTeacher.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(this, "Please choose ONE Student Grade", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Xác nhận
        int choose = JOptionPane.NO_OPTION;
        choose = JOptionPane.showConfirmDialog(this, "Delete This Teacher ?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (choose == JOptionPane.NO_OPTION) {
            return;
        }

        //xóa
        int TeacherID = Integer.parseInt(tbTeacher.getModel().getValueAt(tbTeacher.getSelectedRow(), 0).toString());
        try {
            if (teacherBUS.deleteTeacher(TeacherID) > 0) {
                JOptionPane.showMessageDialog(this, "Delete Teacher Success !");
                btnReloadActionPerformed(evt);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An error occured when Delete Data, please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            return;
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (tbTeacher.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(this, "Please choose ONE Student Grade", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int teacherID = Integer.parseInt(tbTeacher.getModel().getValueAt(tbTeacher.getSelectedRow(), 0).toString());
        EditFrame = new EditManageTeacher(teacherID);
        EditFrame.setVisible(true);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        AddFrame = new AddManageTeacher();
        AddFrame.setVisible(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        if (tbTeacher.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(this, "Please choose ONE Student Grade", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int teacherID = Integer.parseInt(tbTeacher.getModel().getValueAt(tbTeacher.getSelectedRow(), 0).toString());

        DetailFrame = new DetailManangeTeacher(teacherID);
        DetailFrame.setVisible(true);
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        Reset();
    }//GEN-LAST:event_btnReloadActionPerformed

    private void Reset() {
        GetAllList();
        txtFindContent.setText("");
        LoadTeacher(list);
    }

    private void SetUpTable() {
        for (int i = 0; i < tbTeacher.getColumnCount(); i++) {
            tbTeacher.getColumnModel().getColumn(i).setCellRenderer(new LeftAlignedCellRenderer());
        }
    }

    public void GetAllList() {
        try {
            this.list = teacherBUS.GetAllTeacher();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An error occured when Get Data in Database, please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            return;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnReload;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbTeacher;
    private javax.swing.JTextField txtFindContent;
    // End of variables declaration//GEN-END:variables

}

class LeftAlignedCellRenderer extends DefaultTableCellRenderer {

    public LeftAlignedCellRenderer() {
        setHorizontalAlignment(SwingConstants.LEFT); // Đặt căn chỉnh sang trái
    }
}
